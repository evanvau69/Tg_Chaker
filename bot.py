import os
import logging
import requests
from functools import lru_cache
from bs4 import BeautifulSoup
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, ConversationHandler, filters
)

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # Render.com ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá

app = Flask(__name__)

# ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶∏
BOARD, YEAR, ROLL, REG = range(4)

# ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
boards = {
    "‡¶¢‡¶æ‡¶ï‡¶æ": "dhaka", "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ": "chittagong", "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ": "rajshahi",
    "‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ": "comilla", "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤": "barisal", "‡¶∏‡¶ø‡¶≤‡ßá‡¶ü": "sylhet",
    "‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞": "dinajpur", "‡¶Ø‡¶∂‡ßã‡¶∞": "jessore", "‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ": "madrasah",
    "‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤": "technical"
}

# ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶´‡ßá‡¶ö‡¶ø‡¶Ç ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶Ç ‡¶∏‡¶π)
@lru_cache(maxsize=100)
def fetch_result(board, year, roll, reg):
    try:
        logger.info(f"Fetching result for: {board}, {year}, {roll}, {reg}")
        
        payload = {
            "exam": "ssc",
            "year": year,
            "board": board,
            "roll": roll,
            "reg": reg,
            "button2": "Submit"
        }
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.post(
            "https://educationboardresults.gov.bd/index.php",
            data=payload,
            headers=headers,
            timeout=15
        )
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            result_table = soup.find('table', {'class': 'black'})
            
            if result_table:
                result_data = {}
                rows = result_table.find_all('tr')
                
                for row in rows:
                    cols = row.find_all('td')
                    if len(cols) == 2:
                        key = cols[0].get_text(strip=True)
                        value = cols[1].get_text(strip=True)
                        result_data[key] = value
                
                if 'GPA' in result_data:
                    formatted_result = (
                        "üìå **‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏**\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                        f"üë§ ‡¶®‡¶æ‡¶Æ: {result_data.get('Name', 'N/A')}\n"
                        f"üî¢ ‡¶∞‡ßã‡¶≤: {roll}\n"
                        f"üè´ ‡¶¨‡ßã‡¶∞‡ßç‡¶°: {board.capitalize()}\n"
                        f"üìÖ ‡¶∏‡¶æ‡¶≤: {year}\n"
                        f"‚≠ê GPA: {result_data['GPA']}\n"
                        f"üìä ‡¶ó‡ßç‡¶∞‡ßá‡¶°: {result_data.get('Grade', 'N/A')}\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                        f"üìù /start ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"
                    )
                    return formatted_result
                
            return "‚ùå ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá:\n1. ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n2. ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶®\n3. ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®"
        
        return "‚ö†Ô∏è ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    
    except requests.Timeout:
        return "‚è≥ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶Æ‡ßü ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    except Exception as e:
        logger.error(f"Error fetching result: {str(e)}")
        return f"‚ö†Ô∏è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá: {str(e)}"

# ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    
    keyboard = []
    board_items = list(boards.items())
    
    # 2 ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
    for i in range(0, len(board_items), 2):
        row = []
        for name, key in board_items[i:i+2]:
            row.append(InlineKeyboardButton(name, callback_data=key))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤", callback_data="cancel")])
    
    await update.message.reply_text(
        "üìö **‡¶è‡¶∏‡¶è‡¶∏‡¶∏‡¶ø/‡¶è‡¶á‡¶ö‡¶è‡¶∏‡¶∏‡¶ø ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞**\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return BOARD

async def select_board(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        return await cancel(update, context)
    
    context.user_data['board'] = query.data
    await query.edit_message_text(
        text="üìÖ **‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®**\n"
             "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 2023\n"
             "(‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡ß®‡ß¶‡ß¶‡ß¶-‡ß®‡ß¶‡ß®‡ß´ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá)",
        reply_markup=None
    )
    return YEAR

async def get_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    year = update.message.text.strip()
    
    if not year.isdigit() or len(year) != 4 or int(year) < 2000 or int(year) > 2025:
        await update.message.reply_text(
            "‚ö†Ô∏è **‡¶Ö‡¶¨‡ßà‡¶ß ‡¶∏‡¶æ‡¶≤!**\n"
            "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡ß®‡ß¶‡ß¶‡ß¶ ‡¶•‡ßá‡¶ï‡ßá ‡ß®‡ß¶‡ß®‡ß´ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n"
            "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 2023"
        )
        return YEAR
    
    context.user_data['year'] = year
    await update.message.reply_text(
        "üî¢ **‡¶∞‡ßã‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®**\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 123456\n"
        "(‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡ß¨ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ)"
    )
    return ROLL

async def get_roll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    roll = update.message.text.strip()
    
    if not roll.isdigit() or len(roll) != 6:
        await update.message.reply_text(
            "‚ö†Ô∏è **‡¶Ö‡¶¨‡ßà‡¶ß ‡¶∞‡ßã‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞!**\n"
            "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡ß¨ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡ßá‡¶∞ ‡¶∞‡ßã‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n"
            "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 123456"
        )
        return ROLL
    
    context.user_data['roll'] = roll
    await update.message.reply_text(
        "üÜî **‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®**\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 1234567890\n"
        "(‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ)"
    )
    return REG

async def get_reg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reg = update.message.text.strip()
    
    if not reg.isdigit():
        await update.message.reply_text(
            "‚ö†Ô∏è **‡¶Ö‡¶¨‡ßà‡¶ß ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞!**\n"
            "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n"
            "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 1234567890"
        )
        return REG
    
    context.user_data['reg'] = reg
    
    data = context.user_data
    await update.message.reply_text(
        "‚è≥ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n"
        "‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...",
        parse_mode='Markdown'
    )
    
    result = fetch_result(data['board'], data['year'], data['roll'], data['reg'])
    await update.message.reply_text(result, parse_mode='Markdown')
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query if hasattr(update, 'callback_query') else None
    
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ /start ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    else:
        await update.message.reply_text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ /start ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®„ÄÇ")
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìå **‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶Æ‡ßá‡¶®‡ßÅ**\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üîπ /start - ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®\n"
        "üîπ /help - ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‚ö†Ô∏è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá:\n"
        "1. ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n"
        "2. ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®\n"
        "3. ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶®"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

# Flask ‡¶∞‡¶æ‡¶â‡¶ü
@app.route('/')
def home():
    return "‚úÖ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶¨‡¶ü ‡¶∏‡¶ö‡¶≤ ‡¶∞‡ßü‡ßá‡¶õ‡ßá!"

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return 'ok'

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
def setup_application():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            BOARD: [CallbackQueryHandler(select_board)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_year)],
            ROLL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_roll)],
            REG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_reg)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('help', help_command)],
        per_message=False  # PTB warning ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    
    return application

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
if __name__ == '__main__':
    application = setup_application()
    
    if WEBHOOK_URL:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 8000)),  # Render.com ‡¶•‡ßá‡¶ï‡ßá PORT ‡¶®‡ßá‡¶¨‡ßá
            webhook_url=WEBHOOK_URL,
            secret_token=os.getenv("WEBHOOK_SECRET", "")
        )
    else:
        application.run_polling()
