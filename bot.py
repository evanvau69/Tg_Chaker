import os
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    ApplicationBuilder,
    ContextTypes
)
from telegram.constants import ParseMode

# ‡¶¨‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
BOT_TOKEN = os.getenv('BOT_TOKEN')  # Render.com ‡¶è environment variable ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶¨‡ßá
GROUP_ID = int(os.getenv('GROUP_ID', '-1002832508143'))  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø
ADMINS = set(map(int, os.getenv('ADMINS', '6165060012').split()))  # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü

# ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (Render.com-‡¶è PostgreSQL ‡¶¨‡¶æ Redis ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®)
user_data = {}
spam_list = set()

# ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def generate_order_id():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))

def is_admin(user_id):
    return user_id in ADMINS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton("Twilio Buy üéâ", callback_data='twilio_buy')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('TP Buy Zone - ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!', reply_markup=reply_markup)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'twilio_buy':
        keyboard = [
            [InlineKeyboardButton("‡ß´ ‡¶ü‡¶ø ‚úÖ", callback_data='tokens_5')],
            [InlineKeyboardButton("‡ßß‡ß¶ ‡¶ü‡¶ø ‚úÖ", callback_data='tokens_10')],
            [InlineKeyboardButton("‡ßß‡ß´ ‡¶ü‡¶ø ‚úÖ", callback_data='tokens_15')],
            [InlineKeyboardButton("‡ß®‡ß¶ ‡¶ü‡¶ø ‚úÖ", callback_data='tokens_20')],
            [InlineKeyboardButton("Back üîô", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡ßß‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‚ùÑÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§‡ßã‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶®..?',
            reply_markup=reply_markup
        )

    elif query.data.startswith('tokens_'):
        tokens = int(query.data.split('_')[1])
        price = tokens * 10
        binance_rate = tokens * 0.9
        order_id = generate_order_id()
        user = query.from_user

        user_data[user.id] = {
            'tokens': tokens,
            'price': price,
            'binance_rate': binance_rate,
            'order_id': order_id
        }

        keyboard = [
            [InlineKeyboardButton("Confirm ‚úÖ", callback_data='confirm_order')],
            [InlineKeyboardButton("Cancel ‚ùå", callback_data='cancel_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = f"""
‚úÖ Price : {price} ‡¶ü‡¶æ‡¶ï‡¶æ
‚úÖ Binance Rate : ${binance_rate}
‚úÖ Your Order Id : {order_id}
‚úÖ Your Name : {user.first_name or 'N/A'}
‚úÖ Your Chat Id : {user.id}
‚úÖ Your Username : @{user.username or 'N/A'}

‚úÖ Bkash : 0123456789
‚úÖ Nagad : 0123456789
‚úÖ Binance : binance_id

‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ï‡¶ø‡¶®‡¶∂‡¶∞‡ßç‡¶ü ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞ Confirm ‡¶è ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶£‡ßç‡¶Ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá ‚úÖ

‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá Confirm ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ö‡¶ø‡¶∞‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Spam ‡¶ï‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‚úÖ
        """
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

    elif query.data == 'back_to_main':
        keyboard = [[InlineKeyboardButton("Twilio Buy üéâ", callback_data='twilio_buy')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text='TP Buy Zone - ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!', reply_markup=reply_markup)

    elif query.data == 'confirm_order':
        user = query.from_user
        if user.id in spam_list:
            await query.edit_message_text(text='‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!')
            return

        order_data = user_data.get(user.id, {})
        
        group_message = f"""
üìå ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ üìå
‚úÖ Tokens: {order_data.get('tokens', 0)}
‚úÖ Price: {order_data.get('price', 0)} ‡¶ü‡¶æ‡¶ï‡¶æ
‚úÖ Binance Rate: ${order_data.get('binance_rate', 0)}
‚úÖ Order ID: {order_data.get('order_id', 'N/A')}
‚úÖ User: @{user.username or 'N/A'} ({user.first_name or 'N/A'})
‚úÖ Chat ID: {user.id}
        """
        await context.bot.send_message(chat_id=GROUP_ID, text=group_message)
        await query.edit_message_text(text='‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶£‡ßç‡¶Ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§')
        del user_data[user.id]

    elif query.data == 'cancel_order':
        user = query.from_user
        if user.id in user_data:
            del user_data[user.id]
        await query.edit_message_text(text='‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§')

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("Permission denied!")
        return

    if not context.args:
        await update.message.reply_text("Usage: /broadcast <message>")
        return

    message = ' '.join(context.args)
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡¶ø‡ßü‡ßá ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
    # ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
    # for user_id in all_users:
    #     try:
    #         await context.bot.send_message(chat_id=user_id, text=message)
    #     except:
    #         continue
    await update.message.reply_text(f"Broadcast sent to X users")

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("Permission denied!")
        return

    if not context.args:
        await update.message.reply_text("Usage: /add_admin <user_id>")
        return

    try:
        new_admin = int(context.args[0])
        ADMINS.add(new_admin)
        await update.message.reply_text(f"User {new_admin} added as admin")
    except ValueError:
        await update.message.reply_text("Invalid user ID")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("Permission denied!")
        return

    if not context.args:
        await update.message.reply_text("Usage: /remove_admin <user_id>")
        return

    try:
        admin_id = int(context.args[0])
        if admin_id in ADMINS:
            ADMINS.remove(admin_id)
            await update.message.reply_text(f"User {admin_id} removed from admin")
        else:
            await update.message.reply_text("User is not an admin")
    except ValueError:
        await update.message.reply_text("Invalid user ID")

async def spam_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("Permission denied!")
        return

    if not context.args:
        await update.message.reply_text("Usage: /spam <user_id>")
        return

    try:
        user_id = int(context.args[0])
        spam_list.add(user_id)
        await update.message.reply_text(f"User {user_id} added to spam list")
    except ValueError:
        await update.message.reply_text("Invalid user ID")

async def webhook(request):
    """Render.com-‡¶è Webhook ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    update = Update.de_json(await request.get_json(), bot)
    await dispatcher.process_update(update)
    return {"status": "ok"}

def main() -> None:
    """Render.com-‡¶è Web Service ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨‡ßá"""
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button_click))
    
    # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏
    application.add_handler(CommandHandler('broadcast', broadcast))
    application.add_handler(CommandHandler('add_admin', add_admin))
    application.add_handler(CommandHandler('remove_admin', remove_admin))
    application.add_handler(CommandHandler('spam', spam_user))

    # Render.com-‡¶è Web Service ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
    if os.getenv('RENDER'):
        PORT = int(os.getenv('PORT', 10000))
        WEBHOOK_URL = os.getenv('WEBHOOK_URL') + '/webhook'
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL
        )
    else:
        # ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç
        application.run_polling()

if __name__ == '__main__':
    main()
