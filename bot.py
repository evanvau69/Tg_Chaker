import os
import requests
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, ConversationHandler, filters
)

# Environment Variable ‡¶•‡ßá‡¶ï‡ßá Bot Token ‡¶®‡ßá‡¶ì‡ßü‡¶æ
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = "https://tg-chaker.onrender.com"  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Render URL

app = Flask(__name__)

# ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ
BOARD, YEAR, ROLL, REG = range(4)

# ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
boards = {
    "‡¶¢‡¶æ‡¶ï‡¶æ": "dhaka", "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ": "chittagong", "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ": "rajshahi",
    "‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ": "comilla", "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤": "barisal", "‡¶∏‡¶ø‡¶≤‡ßá‡¶ü": "sylhet",
    "‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞": "dinajpur", "‡¶Ø‡¶∂‡ßã‡¶∞": "jessore", "‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ": "madrasah",
    "‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤": "technical"
}

@app.route('/')
def home():
    return "‚úÖ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá!"

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return 'ok'

# ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def ‡¶∂‡ßÅ‡¶∞‡ßÅ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ = list(boards.items())
    ‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶¨‡¶æ‡¶ü‡¶® = []

    for i in range(0, len(‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ), 2):
        ‡¶∏‡¶æ‡¶∞‡¶ø = []
        for ‡¶®‡¶æ‡¶Æ, ‡¶ï‡ßÄ in ‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ[i:i+2]:
            ‡¶∏‡¶æ‡¶∞‡¶ø.append(InlineKeyboardButton(‡¶®‡¶æ‡¶Æ, callback_data=‡¶ï‡ßÄ))
        ‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶¨‡¶æ‡¶ü‡¶®.append(‡¶∏‡¶æ‡¶∞‡¶ø)

    await update.message.reply_text(
        "üìö ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
        reply_markup=InlineKeyboardMarkup(‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶¨‡¶æ‡¶ü‡¶®)
    )
    return BOARD

# ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®
async def ‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['board'] = query.data
    await query.message.reply_text("üìÖ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®‡¶É ‡ß®‡ß¶‡ß®‡ß´):")
    return YEAR

# ‡¶∏‡¶æ‡¶≤ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü
async def ‡¶∏‡¶æ‡¶≤_‡¶®‡¶ø‡¶¨‡ßá(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['year'] = update.message.text.strip()
    await update.message.reply_text("üî¢ ‡¶∞‡ßã‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
    return ROLL

# ‡¶∞‡ßã‡¶≤ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü
async def ‡¶∞‡ßã‡¶≤_‡¶®‡¶ø‡¶¨‡ßá(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['roll'] = update.message.text.strip()
    await update.message.reply_text("üÜî ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
    return REG

# ‡¶∞‡ßá‡¶ú‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶Ü‡¶®‡¶æ
async def ‡¶∞‡ßá‡¶ú‡¶ø_‡¶®‡¶ø‡¶¨‡ßá(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['reg'] = update.message.text.strip()
    await update.message.reply_text("‚è≥ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶Ü‡¶®‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")

    data = context.user_data
    ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ = ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü_‡¶Ü‡¶®‡ßã(data['board'], data['year'], data['roll'], data['reg'])

    await update.message.reply_text(‡¶´‡¶≤‡¶æ‡¶´‡¶≤)
    return ConversationHandler.END

# ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü_‡¶Ü‡¶®‡ßã(‡¶¨‡ßã‡¶∞‡ßç‡¶°, ‡¶∏‡¶æ‡¶≤, ‡¶∞‡ßã‡¶≤, ‡¶∞‡ßá‡¶ú‡¶ø):
    try:
        ‡¶§‡¶•‡ßç‡¶Ø = {
            "exam": "ssc",
            "year": ‡¶∏‡¶æ‡¶≤,
            "board": ‡¶¨‡ßã‡¶∞‡ßç‡¶°,
            "roll": ‡¶∞‡ßã‡¶≤,
            "reg": ‡¶∞‡ßá‡¶ú‡¶ø,
            "button2": "Submit"
        }
        ‡¶∞‡ßá‡¶∏ = requests.post("https://educationboardresults.gov.bd/index.php", data=‡¶§‡¶•‡ßç‡¶Ø)
        if "GPA" in ‡¶∞‡ßá‡¶∏.text:
            return "‚úÖ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!\n(‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá HTML ‡¶•‡ßá‡¶ï‡ßá GPA, ‡¶®‡¶æ‡¶Æ, ‡¶∏‡¶æ‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§)"
        else:
            return "‚ùå ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶®‡•§"
    except Exception as e:
        return f"‚ö†Ô∏è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}"

# ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
async def ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    return ConversationHandler.END

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ì ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó
application = ApplicationBuilder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", ‡¶∂‡ßÅ‡¶∞‡ßÅ)],
    states={
        BOARD: [CallbackQueryHandler(‡¶¨‡ßã‡¶∞‡ßç‡¶°_‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®)],
        YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, ‡¶∏‡¶æ‡¶≤_‡¶®‡¶ø‡¶¨‡ßá)],
        ROLL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ‡¶∞‡ßã‡¶≤_‡¶®‡¶ø‡¶¨‡ßá)],
        REG: [MessageHandler(filters.TEXT & ~filters.COMMAND, ‡¶∞‡ßá‡¶ú‡¶ø_‡¶®‡¶ø‡¶¨‡ßá)],
    },
    fallbacks=[CommandHandler("cancel", ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤)],
)

application.add_handler(conv_handler)

# Webhook ‡¶ö‡¶æ‡¶≤‡ßÅ
if __name__ == "__main__":
    application.run_webhook(
        listen="0.0.0.0",  # ‡¶∏‡¶¨ IP ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        port=8000,         # ‡ßÆ‡ß¶‡ß¶‡ß¶ ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
        webhook_url=WEBHOOK_URL  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Render webhook URL
    )
