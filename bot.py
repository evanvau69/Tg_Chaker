import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)
import logging

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_GROUP_ID = os.getenv("ADMIN_GROUP_ID", "-1001234567890")  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø

# ‡¶¶‡ßá‡¶∂ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶§‡¶æ‡¶ï‡¶æ ‡¶á‡¶Æ‡ßã‡¶ú‡¶ø
COUNTRIES = {
    "US": "üá∫üá∏ US",
    "UK": "üá¨üáß UK",
    "Canada": "üá®üá¶ Canada",
    "Israel": "üáÆüá± Israel",
    "Peru": "üáµüá™ Peru",
    "Panama": "üáµüá¶ Panama",
    "Slovenia": "üá∏üáÆ Slovenia",
    "Chad": "üáπüá© Chad",
    "Afghanistan": "üá¶üá´ Afghanistan"
}

# ‡¶°‡ßÅ‡¶∞‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø
DURATIONS = {
    "2_hour": {"text": "2 Hour $0.25 üü°", "price": "0.25"},
    "12_hour": {"text": "12 Hour $0.40 üîµ", "price": "0.40"},
    "1_day": {"text": "1 Days $0.80 üü¢", "price": "0.80"}
}

# ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°
PAYMENT_METHODS = {
    "bkash": "Bkash",
    "nagad": "Nagad",
    "binance": "Binance"
}

def start(update: Update, context: CallbackContext) -> None:
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("Buy Proxy üéâ", callback_data="buy_proxy")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"Hay {user.first_name} How Are You",
        reply_markup=reply_markup
    )

def button(update: Update, context: CallbackContext) -> None:
    """‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    query = update.callback_query
    query.answer()

    if query.data == "buy_proxy":
        # Buy Proxy ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá
        show_country_buttons(query)
    elif query.data in COUNTRIES:
        # ‡¶¶‡ßá‡¶∂ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶≤‡ßá
        context.user_data["selected_country"] = query.data
        show_duration_buttons(query)
    elif query.data == "others":
        # Others ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá
        query.edit_message_text("If You want Others country Proxy Please Inbox Admin")
    elif query.data in DURATIONS:
        # ‡¶°‡ßÅ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶≤‡ßá
        context.user_data["selected_duration"] = query.data
        show_payment_info(query, context)
    elif query.data == "confirm":
        # Confirm ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá
        handle_confirmation(query, context)
    elif query.data == "cancel":
        # Cancel ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá
        query.edit_message_text("Order has been cancelled.")

def show_country_buttons(query):
    """‡¶¶‡ßá‡¶∂ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá"""
    keyboard = []
    # 2‡¶ü‡¶ø ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
    countries_list = list(COUNTRIES.items())
    for i in range(0, len(countries_list), 2):
        row = []
        if i < len(countries_list):
            country_code, country_name = countries_list[i]
            row.append(InlineKeyboardButton(country_name, callback_data=country_code))
        if i+1 < len(countries_list):
            country_code, country_name = countries_list[i+1]
            row.append(InlineKeyboardButton(country_name, callback_data=country_code))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("Others üåç", callback_data="others")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="Which Country Proxy You Want..?",
        reply_markup=reply_markup
    )

def show_duration_buttons(query):
    """‡¶°‡ßÅ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá"""
    keyboard = []
    for duration_key, duration_info in DURATIONS.items():
        keyboard.append(
            [InlineKeyboardButton(duration_info["text"], callback_data=duration_key)]
        )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="How long do you want to take it for?",
        reply_markup=reply_markup
    )

def show_payment_info(query, context):
    """‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶´‡¶∞‡¶Æ‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá"""
    selected_country = context.user_data.get("selected_country", "Unknown")
    selected_duration = context.user_data.get("selected_duration", "2_hour")
    duration_info = DURATIONS.get(selected_duration, {"text": "", "price": "0.00"})
    
    message_text = (
        "Pay And Give Screenshot Here ‚úÖ After Payment Press Confirm Button ‚úÖ\n\n"
        f"Bkash: \n"
        f"Nagad: \n"
        f"Binance: 1119515774\n"
        f"Amount: ${duration_info['price']}\n"
        f"Country: {COUNTRIES.get(selected_country, selected_country)}\n"
        "For More Payment Please Contact To Admin ‚úÖ"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("Confirm ‚úÖ", callback_data="confirm"),
            InlineKeyboardButton("Cancel ‚ùå", callback_data="cancel")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def handle_confirmation(query, context):
    """‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user = query.from_user
    selected_country = context.user_data.get("selected_country", "Unknown")
    selected_duration = context.user_data.get("selected_duration", "2_hour")
    duration_info = DURATIONS.get(selected_duration, {"text": "", "price": "0.00"})
    
    # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    admin_message = (
        "New Order Arrived!\n\n"
        f"User Name: {user.full_name}\n"
        f"Username: @{user.username}\n"
        f"Country: {COUNTRIES.get(selected_country, selected_country)}\n"
        f"Duration: {duration_info['text']}"
    )
    
    context.bot.send_message(
        chat_id=ADMIN_GROUP_ID,
        text=admin_message
    )
    
    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
    query.edit_message_text("Your order has been confirmed! Admin will contact you soon.")

def main():
    """‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    dispatcher.add_handler(CommandHandler("start", start))

    # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡ßÅ‡ßü‡ßá‡¶∞‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    dispatcher.add_handler(CallbackQueryHandler(button))

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, start))

    # ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
